The second optional delivery is due on November 22nd (Extended from Nobember 20th).
If you would like to submit your delivery, fill the form following the link in the "2nd Delivery" folder in the Project section.
On November 23rd, I will clone the submitted repositories to review them.

The second delivery covers all sections of the project’s functional requirements, except for security. This means you are not required to implement the security requirements at this stage.
Testing can be in an early stage, but it is highly recommended to include at least tests for the gateway related to the player’s API.
The main goal is to have a working prototype of the project that implements the required functionalities and includes clear documentation of the software (Getting Started, API, and Architecture sections).
-The "Getting Started" section (in the GitHub repo) should explain how to build and run the software.
-The API should be documented using OpenAPI (Swagger).
-The architecture should be documented in a PDF file inside a folder called "docs" in the GitHub repo.
-In the same folder, you should include test files and a copy of the current GitHub Action workflow file.
The PDF file should contain an image of the architecture created with microFreshner, along with brief descriptions of the microservices.

Select at least 4 interesting player operations and show the flow within the backend in the PDF file.
For example, if a player with id = 21 wants to view a specific gacha in their collection with id = 42:
-The player sends a GET request to the API Gateway at /players/21/gachas/42.
-The API Gateway forwards the request to the Player microservice.
-The Player microservice sends a GET request to the Players DB manager at /players/21.
-The Players DB manager retrieves the player information from the Players DB and returns it to the Player microservice.
-The response contains the list of the player’s gachas. If gacha 42 is in the list, the Player microservice sends a GET request to the Gacha microservice at /gachas/42.
-The Gacha microservice retrieves the gacha 42 information from the Gachas DB and returns it to the Player microservice.
-The Player microservice returns the gacha 42 information to the API Gateway.

Note that you may have implemented player gachas management differently; this is simply an example.
By "interesting player operations," I mean operations that involve complex interactions where you decide how to manage data flow between the microservices.
Since this delivery will not be graded, I encourage you to choose operations on which you’d like feedback.