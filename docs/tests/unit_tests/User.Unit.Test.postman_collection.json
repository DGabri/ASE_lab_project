{
	"info": {
		"_postman_id": "59f8b419-34a9-46c6-9ef7-6356759ffe56",
		"name": "User Unit Test",
		"description": "Unit tests for user microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15599800",
		"_collection_link": "https://cryptobot2019.postman.co/workspace/ASE~569d8104-92bd-4497-95e8-f5154e17f0a0/collection/15599800-59f8b419-34a9-46c6-9ef7-6356759ffe56?action=share&source=collection_link&creator=15599800"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(201);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('rsp');",
							"    pm.expect(jsonData.rsp).to.eql('User created correctly');",
							"    pm.expect(jsonData).to.have.property('id');",
							"",
							"    if (jsonData.id) {",
							"        pm.collectionVariables.set(\"user_id\", jsonData.id);",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"prova\",\n    \"email\": \"prova@prova.com\",\n    \"user_id\": 1\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3002/create_user",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"create_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(409);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('err');",
							"    pm.expect(jsonData.err).to.eql('Username or email already exists');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"test_user\",\n    \"email\": \"test@example.com\",\n    \"user_id\": 1\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3002/create_user",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"create_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('rsp');",
							"    pm.expect(jsonData.rsp).to.include('User updated successfully');",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "test-token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"new username\"\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3002/player/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update User Eror\", function() {",
							"    pm.response.to.have.status(400);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('err');",
							"    pm.expect(jsonData.err).to.include('User not found');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "test-token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"Test username\"\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3002/player/999",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.equal('Successfully updated player gold');",
							"    pm.expect(jsonData).to.have.property('new_balance');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 10,\n    \"is_refill\": true\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3002/player/gold/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"gold",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Balance - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.rsp).to.include('must be below');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 1000,\n    \"is_refill\": true\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3002/player/gold/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"gold",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Collection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Modify Account Success\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('rsp');",
							"    pm.expect(jsonData.rsp).to.contain('Success');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "csrf_token",
						"value": "test",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": {{user_id}},\n    \"pieces_id\": [1,2,3]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3002/player/collection/update",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"collection",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Collection - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Modify Account Success\", function() {",
							"    pm.response.to.have.status(400);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('err');",
							"    pm.expect(jsonData.err).to.contain('pieces_id must be an array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "csrf_token",
						"value": "test",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": {{user_id}},\n    \"pieces_id\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3002/player/collection/update",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"collection",
						"update"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Collection - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.collection).to.be.an('array');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1:3002/player/collection/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"collection",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Collection - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(400);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.include('does not exist');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1:3002/player/collection/999",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"collection",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(200);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.rsp).to.equal('User deleted successfully');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1:3002/player/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User Success\", function() {",
							"    pm.response.to.have.status(400);",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.include('User not found');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1:3002/player/999",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3002",
					"path": [
						"player",
						"999"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// You can add setup logic here if needed"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "user_id",
			"value": ""
		}
	]
}