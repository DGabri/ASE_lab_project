{
	"info": {
		"_postman_id": "a4585df4-e524-4ed6-973e-869daeffb666",
		"name": "Auth Unit Tests",
		"description": "Unit tests for auth microservice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15599800",
		"_collection_link": "https://cryptobot2019.postman.co/workspace/ASE~569d8104-92bd-4497-95e8-f5154e17f0a0/collection/15599800-a4585df4-e524-4ed6-973e-869daeffb666?action=share&source=collection_link&creator=15599800"
	},
	"item": [
		{
			"name": "Register User Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful user registration\", function () {",
							"    pm.response.to.have.status(201);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rsp).to.eql('User created correctly');",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.globals.set('user_id', jsonData.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"testuser1\",\n  \"email\": \"test@example.com\",\n  \"password\": \"Test12345\",\n  \"user_type\": 1\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3001/create_user",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"create_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Duplicate username error\", function () {",
							"    pm.response.to.have.status(400);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('Username already present');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"testuser1\",\n  \"email\": \"test@example.com\",\n  \"password\": \"Test12345\",\n  \"user_type\": 1\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3001/create_user",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"create_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful login\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('access_token');",
							"    pm.expect(jsonData).to.have.property('refresh_token');",
							"    pm.expect(jsonData.token_type).to.eql('bearer');",
							"    pm.expect(jsonData).to.have.property('expires_in');",
							"    pm.expect(jsonData.user).to.have.property('id');",
							"    pm.expect(jsonData.user).to.have.property('username');",
							"    pm.expect(jsonData.user).to.have.property('user_type');",
							"    pm.expect(jsonData.user).to.have.property('role');",
							"    // save token for other requests",
							"    pm.globals.set('access_token', jsonData.access_token);",
							"    pm.globals.set('refresh_token', jsonData.refresh_token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"testuser1\",\n  \"password\": \"Test12345\"\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3001/token",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Wrong credentials error\", function () {",
							"    pm.response.to.have.status(401);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('Wrong credentials');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"testuser1\",\n  \"password\": \"wrongpassword\"\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3001/token",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful logout\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('msg');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "https://127.0.0.1:3001/logout/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"logout",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid token error\", function () {",
							"    pm.response.to.have.status(401);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('Invalid token');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token"
					}
				],
				"url": {
					"raw": "https://127.0.0.1:3001/logout/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"logout",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login For Authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful login\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('access_token');",
							"    pm.expect(jsonData).to.have.property('refresh_token');",
							"    pm.expect(jsonData.token_type).to.eql('bearer');",
							"    pm.expect(jsonData).to.have.property('expires_in');",
							"    pm.expect(jsonData.user).to.have.property('id');",
							"    pm.expect(jsonData.user).to.have.property('username');",
							"    pm.expect(jsonData.user).to.have.property('user_type');",
							"    pm.expect(jsonData.user).to.have.property('role');",
							"    // save token for other requests",
							"    pm.globals.set('access_token', jsonData.access_token);",
							"    pm.globals.set('refresh_token', jsonData.refresh_token);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"testuser1\",\n  \"password\": \"Test12345\"\n}"
				},
				"url": {
					"raw": "https://127.0.0.1:3001/token",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Modify user\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.rsp).to.eql('Username updated successfully');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"new username\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3001/user/modify/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"user",
						"modify",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modify user Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Modify user\", function () {",
							"    pm.response.to.have.status(400);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('username required');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid_token"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usernamea\": \"new username\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3001/user/modify/{{user_id}}",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"user",
						"modify",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid token error\", function () {",
							"    pm.response.to.have.status(403);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('User ID does not match token');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_id\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3001/introspect",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"introspect"
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify user - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid token error\", function () {",
							"    pm.response.to.have.status(400);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('user_id required  body');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3001/introspect",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"introspect"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid token error\", function () {",
							"    pm.response.to.have.status(200);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('email_verified');",
							"    pm.expect(jsonData).to.have.property('locale');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('preferred_username');",
							"    pm.expect(jsonData).to.have.property('roles');",
							"    pm.expect(jsonData).to.have.property('sub');",
							"    pm.expect(jsonData).to.have.property('updated_at');",
							"    pm.expect(jsonData).to.have.property('zoneinfo');",
							"    ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3001/userinfo",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"userinfo"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Info - Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Invalid token error\", function () {",
							"    pm.response.to.have.status(401);",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.err).to.eql('Missing Authorization header');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:3001/userinfo",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"userinfo"
					]
				}
			},
			"response": []
		}
	]
}